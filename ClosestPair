
#include <stdio.h>
#include <float.h>
#include <stdlib.h>
#include <math.h>

#define INFN 99999

typedef struct
{
    int x, y;
}Point;

Point min1,min2;

int compareX(const void* a, const void* b)
{
    Point *p1 = (Point *)a,  *p2 = (Point *)b;
    return (p1->x - p2->x);
}

int compareY(const void* a, const void* b)
{
    Point *p1 = (Point *)a,   *p2 = (Point *)b;
    return (p1->y - p2->y);
}

float dist(Point p1, Point p2)
{
    return sqrt( (p1.x - p2.x)*(p1.x - p2.x) +(p1.y - p2.y)*(p1.y - p2.y));
}

float bruteForce(Point P[], int n)
{
    float min = INFN;
    for (int i = 0; i < n; ++i)
        for (int j = i+1; j < n; ++j)
            if (dist(P[i], P[j]) < min){
                min1 = P[i];
                min2 = P[j];
                min = dist(P[i], P[j]);
            }
    return min;
}


float min(float x, float y)
{
    return (x < y)? x : y;
}


float stripClosest(Point strip[], int size, float d)
{
    float min = d; 
    
    qsort(strip, size, sizeof(Point), compareY); 
    
    for (int i = 0; i < size; ++i)
        for (int j = i+1; j < size && (strip[j].y - strip[i].y) < min; ++j)
            if (dist(strip[i],strip[j]) < min){
                min1 = strip[i];
                min2 = strip[j];
                min = dist(strip[i], strip[j]);
            }
    
    return min;
}


float closestUtil(Point P[], int n)
{
    if (n <= 3)
        return bruteForce(P, n);
    
    int mid = n/2;
    Point midPoint = P[mid];
    
    float dl = closestUtil(P, mid);
    float dr = closestUtil(P + mid, n-mid);

    float d = min(dl, dr);
    
    Point strip[n];
    int j = 0;
    for (int i = 0; i < n; i++)
        if (abs(P[i].x - midPoint.x) < d)
            strip[j] = P[i], j++;
    
    return min(d, stripClosest(strip, j, d) );
}


float closest(Point P[], int n)
{
    qsort(P, n, sizeof(Point), compareX);
    
    return closestUtil(P, n);
}


int main()
{
    Point P[50] ;
    int n,i;
    printf("enter the number of points");
    scanf("%d",&n);
    for (i=0; i<n; i++) {
        printf("enter the values for coordinate number %d\n",i+1);
        scanf("%d%d",&P[i].x,&P[i].y);
        
    }
    printf("The smallest distance is %f ", closest(P, n-1));
    printf("The (%d,%d)\t(%d,%d) ",min1.x,min1.y,min2.x,min2.y);
    return 0;
}
